@{
    Layout = "_ConfigurePlugin";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/monokai.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet" />

<div class="row">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="content-tab" data-toggle="tab" href="#content" role="tab">Content</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="views-tab" data-toggle="tab" href="#views" role="tab">Views</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="content" role="tabpanel">
                        <div id="content-tree"></div>
                    </div>
                    <div class="tab-pane fade" id="views" role="tabpanel">
                        <div id="views-tree"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <div id="file-info" class="alert alert-info" style="display:none; margin-bottom: 0;">
                    <p class="mb-0"><strong>File:</strong> <span id="file-name"></span></p>
                    <p class="mb-0"><strong>Last Modified:</strong> <span id="last-modified"></span></p>
                    <p class="mb-0"><strong>Size:</strong> <span id="file-size"></span></p>
                </div>
            </div>
            <div class="card-body p-0">
                <textarea id="editor"></textarea>
            </div>
            <div class="card-footer text-right">
                <button type="button" class="btn btn-danger" onclick="deleteFile()" id="btnDelete">Delete File</button>
                <button type="button" class="btn btn-success" onclick="saveFile()" id="btnSave">Save</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/xml/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/css/css.min.js"></script>

<script>
    var editor;
    var currentFile = null;
    
    $(document).ready(function() {
        initializeEditor();
        initializeTreeViews();
    });
    
    function initializeEditor() {
        var editorElement = document.getElementById("editor");
        editor = CodeMirror.fromTextArea(editorElement, {
            lineNumbers: true,
            mode: "text/html",
            theme: "monokai",
            indentUnit: 4,
            indentWithTabs: true,
            lineWrapping: true,
            viewportMargin: Infinity,
            height: "auto",
            autoRefresh: true
        });
        
        editor.setSize("100%", 500);
        
        // Editörü görünür yap
        setTimeout(function() {
            editor.refresh();
        }, 100);
    }
    
    function initializeTreeViews() {
        $('#content-tree').jstree({
            'core': {
                'check_callback': true,
                'themes': {
                    'name': 'default',
                    'responsive': true,
                    'dots': true,
                    'icons': true,
                    'variant': 'large',
                    'stripes': false
                },
                'data': function(node, callback) {
                    $.get('@Url.Action("GetContentFiles", "ThemeModern", new { area = "Admin" })', function(data) {
                        var treeData = processTreeData(data);
                        callback.call(this, treeData);
                    });
                }
            },
            'plugins': ['types', 'state', 'wholerow'],
            'types': {
                'default': {
                    'icon': 'fa fa-folder text-warning'
                },
                'folder': {
                    'icon': 'fa fa-folder text-warning'
                },
                'file': {
                    'icon': 'fa fa-file text-primary'
                },
                'image': {
                    'icon': 'fa fa-file-image text-info'
                },
                'font': {
                    'icon': 'fa fa-font text-danger'
                },
                'css': {
                    'icon': 'fa fa-css3 text-primary'
                },
                'js': {
                    'icon': 'fa fa-js text-warning'
                },
                'html': {
                    'icon': 'fa fa-html5 text-danger'
                }
            }
        }).on('select_node.jstree', function(e, data) {
            if (data.node.type !== 'folder' && data.node.original && data.node.original.path) {
                loadFileContent(data.node.original.path);
            }
        });
        
        $('#views-tree').jstree({
            'core': {
                'check_callback': true,
                'themes': {
                    'name': 'default',
                    'responsive': true,
                    'dots': true,
                    'icons': true,
                    'variant': 'large',
                    'stripes': false
                },
                'data': function(node, callback) {
                    $.get('@Url.Action("GetViewFiles", "ThemeModern", new { area = "Admin" })', function(data) {
                        var treeData = processTreeData(data);
                        callback.call(this, treeData);
                    });
                }
            },
            'plugins': ['types', 'state', 'wholerow'],
            'types': {
                'default': {
                    'icon': 'fa fa-folder text-warning'
                },
                'folder': {
                    'icon': 'fa fa-folder text-warning'
                },
                'file': {
                    'icon': 'fa fa-file text-primary'
                },
                'image': {
                    'icon': 'fa fa-file-image text-info'
                },
                'font': {
                    'icon': 'fa fa-font text-danger'
                },
                'css': {
                    'icon': 'fa fa-css3 text-primary'
                },
                'js': {
                    'icon': 'fa fa-js text-warning'
                },
                'html': {
                    'icon': 'fa fa-html5 text-danger'
                }
            }
        }).on('select_node.jstree', function(e, data) {
            if (data.node.type !== 'folder' && data.node.original && data.node.original.path) {
                loadFileContent(data.node.original.path);
            }
        });
        
        // Tab değiştiğinde ağacı yenile
        $('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
            var target = $(e.target).attr("href");
            if (target === '#content-tab') {
                $('#content-tree').jstree('refresh');
            } else if (target === '#views-tab') {
                $('#views-tree').jstree('refresh');
            }
        });
    }
    
    function processTreeData(data) {
        return data.map(function(node) {
            var nodeType = 'file';
            
            if (node.Type === 'folder') {
                nodeType = 'folder';
            } else {
                var ext = (node.Extension || '').toLowerCase();
                switch (ext) {
                    case '.jpg':
                    case '.jpeg':
                    case '.png':
                    case '.gif':
                    case '.svg':
                        nodeType = 'image';
                        break;
                    case '.ttf':
                    case '.woff':
                    case '.woff2':
                    case '.eot':
                        nodeType = 'font';
                        break;
                    case '.css':
                        nodeType = 'css';
                        break;
                    case '.js':
                        nodeType = 'js';
                        break;
                    case '.html':
                    case '.cshtml':
                        nodeType = 'html';
                        break;
                }
            }

            var nodePath = node.Path || node.Id;
            console.log("Node data:", { id: node.Id, path: nodePath, type: nodeType });

            return {
                id: node.Id,
                text: node.Text,
                type: nodeType,
                path: nodePath,
                state: {
                    opened: true
                },
                children: node.Children ? processTreeData(node.Children) : []
            };
        });
    }
    
    function loadFileContent(filePath) {
        if (!filePath) {
            alert("Geçersiz dosya yolu!");
            return;
        }

        console.log("Dosya yükleniyor:", filePath);

        $.get('@Url.Action("GetFileContent", "ThemeModern", new { area = "Admin" })', { 
            filePath: filePath
        }, function(response) {
            console.log("Sunucu yanıtı:", response);
            
            if (response.success) {
                currentFile = {
                    ...response.fileInfo,
                    path: filePath
                };
                
                console.log("Güncel dosya bilgisi:", currentFile);
                
                var fileName = filePath.split('\\').pop();
                $("#file-name").text(fileName);
                
                if (response.fileInfo && response.fileInfo.LastModified) {
                    var date = new Date(response.fileInfo.LastModified);
                    $("#last-modified").text(date.toLocaleString('tr-TR'));
                } else {
                    $("#last-modified").text("-");
                }
                
                if (response.fileInfo && typeof response.fileInfo.Size !== 'undefined') {
                    var size = (response.fileInfo.Size / 1024).toFixed(2);
                    $("#file-size").text(size + " KB");
                } else {
                    $("#file-size").text("-");
                }
                
                $("#file-info").show();

                var extension = "";
                if (response.fileInfo && response.fileInfo.extension) {
                    extension = response.fileInfo.extension.toLowerCase();
                } else {
                    var match = filePath.match(/\.[^/.]+$/);
                    if (match) {
                        extension = match[0].toLowerCase();
                    }
                }

                var mode = "text/plain";
                var isBinaryFile = false;
                
                switch(extension) {
                    case '.html':
                    case '.cshtml':
                        mode = "text/html";
                        break;
                    case '.js':
                        mode = "text/javascript";
                        break;
                    case '.css':
                        mode = "text/css";
                        break;
                    case '.jpg':
                    case '.jpeg':
                    case '.png':
                    case '.gif':
                    case '.svg':
                    case '.ttf':
                    case '.woff':
                    case '.woff2':
                    case '.eot':
                        isBinaryFile = true;
                        break;
                }

                if (isBinaryFile) {
                    editor.setValue("Bu dosya türü görüntülenemez.");
                    editor.setOption("readOnly", true);
                    $("#btnSave, #btnDelete").prop("disabled", true);
                    return;
                }
                
                try {
                    console.log("Editör içeriği ayarlanıyor:", response.content);
                    
                    editor.setValue(response.content || "");
                    editor.clearHistory();
                    editor.setOption("mode", mode);
                    editor.setOption("readOnly", response.fileInfo ? response.fileInfo.isReadOnly : false);
                    
                    setTimeout(function() {
                        editor.refresh();
                        editor.focus();
                    }, 100);
                    
                    $("#btnSave, #btnDelete").prop("disabled", response.fileInfo ? response.fileInfo.isReadOnly : false);
                } catch (err) {
                    console.error("Editör hatası:", err);
                    alert("Editör içeriği ayarlanırken hata oluştu: " + err.message);
                }
            } else {
                console.error("Sunucu hatası:", response.message);
                alert("Dosya içeriği yüklenirken hata oluştu: " + response.message);
            }
        }).fail(function(jqXHR, textStatus, errorThrown) {
            console.error("Ajax hatası:", textStatus, errorThrown);
            alert("Dosya içeriği yüklenirken hata oluştu: " + textStatus);
        });
    }
    
    function saveFile() {
        if (!currentFile) {
            alert("Lütfen bir dosya seçin!");
            return;
        }

        if (!currentFile.path) {
            alert("Dosya yolu bulunamadı!");
            return;
        }

        var content = editor.getValue();
        if (!content && content !== "") {
            alert("Dosya içeriği boş olamaz!");
            return;
        }

        console.log("Dosya kaydediliyor:", {
            path: currentFile.path,
            content: content
        });

        $.ajax({
            url: '@Url.Action("SaveFile", "ThemeModern", new { area = "Admin" })',
            type: "POST",
            data: {
                filePath: currentFile.path,
                content: content
            },
            success: function(response) {
                if (response.success) {
                    alert("Dosya başarıyla kaydedildi!");
                } else {
                    alert("Dosya kaydedilirken hata oluştu: " + response.message);
                }
            },
            error: function(xhr, status, error) {
                console.error("Kaydetme hatası:", error);
                alert("Dosya kaydedilirken bir hata oluştu!");
            }
        });
    }
    
    function deleteFile() {
        if (!currentFile) {
            alert("Please select a file!");
            return;
        }
        
        if (confirm("Are you sure you want to delete this file?")) {
            $.ajax({
                url: '@Url.Action("DeleteFile", "ThemeModern", new { area = "Admin" })',
                type: "POST",
                data: {
                    filePath: currentFile.path
                },
                success: function(response) {
                    if (response.success) {
                        alert("File deleted successfully!");
                        location.reload();
                    } else {
                        alert("Error deleting file: " + response.message);
                    }
                },
                error: function() {
                    alert("Error deleting file!");
                }
            });
        }
    }
</script>

<style>
    .CodeMirror {
        height: 500px !important;
        width: 100% !important;
        border: 1px solid #ddd;
        font-size: 14px;
        font-family: monospace;
    }
    
    .CodeMirror-readOnly {
        background-color: #f5f5f5;
    }
    
    .CodeMirror-scroll {
        min-height: 500px;
    }
    
    #content-tree, #views-tree {
        overflow: auto;
        max-height: 500px;
        font-size: 14px;
        padding: 10px;
    }
    
    .jstree-default .jstree-themeicon-custom {
        background-size: contain;
    }
    
    .jstree-default .jstree-node {
        margin-left: 12px;
    }
    
    .jstree-default .jstree-icon {
        color: inherit;
    }
    
    .jstree-default .jstree-anchor {
        height: 28px;
        line-height: 28px;
        padding-left: 5px;
    }
    
    .jstree-default .jstree-icon.fa {
        font-size: 16px;
        line-height: 24px;
        width: 24px;
        height: 24px;
    }

    .jstree-default .jstree-clicked {
        background: #e1e1e1;
        border-radius: 3px;
        box-shadow: none;
    }

    .jstree-default .jstree-hovered {
        background: #f5f5f5;
        border-radius: 3px;
        box-shadow: none;
    }
    
    .card-body {
        min-height: 550px;
    }
</style> 